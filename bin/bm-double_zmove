#!/usr/bin/env perl

use strict;
use warnings;
use 5.022;
use Getopt::Long;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Gcode::ParseSpeed;

my %opts;
GetOptions(
    \%opts,
    'bm', 'db', 'dbm',
    'matches=i',
    'prec=f',
    'iter=i',
) or die "Unknown option\n";

my $num_matches = $opts{matches}; # = 167;

my $regex = qr/^G[01](?![\d.]).*Z([23])\./;

my $file = shift || 'target/rose.gcode' ;
my @lines = do { open my $fh, '<', $file or die; <$fh> };
my %tests = (
    naive        => \&naive_impl,
    'non-greedy' => \&non_greedy_impl,
    'greedy'     => \&greedy_impl,
    'comp_regex' => \&comp_regex_impl,
    'substr'     => \&substr_impl,
    'index'      => \&index_impl,
);

Gcode::ParseSpeed::run( \%opts, \%tests, scalar(@lines) );

sub naive_impl
{
    my ($line, $count1, $count2) = ('', 0, 0);
    my $state = 0;
    for(@lines)
    {
        ($line, $count1, $state) = ($_, $count1+1, 1) if $state == 0 && /^G[01]\b.*Z2\./;
        ($line, $count2, $state) = ($_, $count2+1, 2) if $state == 1 && /^G[01]\b.*Z3\./;
    }
    say STDERR "Error naive ($count1)" if defined $num_matches && $count1 != $num_matches;
    return;
}

sub non_greedy_impl
{
    my ($line, $count1, $count2) = ('', 0, 0);
    my $state = 0;
    for(@lines)
    {
        next unless $state < 2 && /^G[01](?![\d.]).*?Z([23])\./;
        next if $state == 1 && $1 eq '2';
        ++$state;
        $line = ($1 eq '2' ? (++$count1, $_) : (++$count2, $_));
    }
    say STDERR "Error non-greedy ($count1)" if defined $num_matches && $count1 != $num_matches;
    return;
}

sub greedy_impl
{
    my ($line, $count1, $count2) = ('', 0, 0);
    my $state = 0;
    for(@lines)
    {
        next unless $state < 2 && /^G[01](?![\d.]).*Z([23])\./;
        next if $state == 1 && $1 eq '2';
        ++$state;
        $line = ($1 eq '2' ? (++$count1, $_) : (++$count2, $_));
    }
    say STDERR "Error greedy ($count1)" if defined $num_matches && $count1 != $num_matches;
    return;
}

sub comp_regex_impl
{
    my ($line, $count1, $count2) = ('', 0, 0);
    my $state = 0;
    for(@lines)
    {
        next unless $state < 2 && $_ =~ $regex;
        next if $state == 1 && $1 eq '2';
        ++$state;
        $line = ($1 eq '2' ? (++$count1, $_) : (++$count2, $_));
    }
    say STDERR "Error comp regex ($count1)" if defined $num_matches && $count1 != $num_matches;
    return;
}

sub substr_impl
{
    my ($line, $count1, $count2, $match, $pos) = ('', 0, 0, '', 0);
    my $state = 0;
    for(@lines)
    {
        next if $state >= 2;
        $match = substr( $_, 0, 2 );
        next unless $match eq 'G1' || $match eq 'G0';
        $match = substr( $_, 2, 1 );
        next if '0' le $match && $match le '9';
        next if -1 == ($pos = index( $_, 'Z', 3 ));
        $match = substr( $_, $pos+1, 1 );
        next unless ($match eq '2' && $state == 0) || ($match eq '3' && $state == 1);
        ++$state;
        $line = ($match eq '2' ? (++$count1, $_) : (++$count2, $_));
    }
    say STDERR "Error substr ($count1)" if defined $num_matches && $count1 != $num_matches;
    return;
}

sub index_impl
{
    my ($line, $count1, $count2, $match, $pos) = ('', 0, 0, '', 0);
    my $state = 0;
    for(@lines)
    {
        next if $state >= 2;
        $match = substr( $_, 0, 2 );
        next unless $match eq 'G1' || $match eq 'G0';
        $match = substr( $_, 2, 1 );
        next if '0' le $match && $match le '9';
        next if -1 == ($pos = index( $_, 'Z', 3 ));
        $match = substr( $_, $pos+1, 1 );
        next unless ($match eq '2' && $state == 0) || ($match eq '3' && $state == 1);
        ++$state;
        $line = ($match eq '2' ? (++$count1, $_) : (++$count2, $_));
    }
    say STDERR "Error index ($count1)" if defined $num_matches && $count1 != $num_matches;
    return;
}
