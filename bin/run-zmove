#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;

use Dumbbench;

my $num_matches; # = 167;
my $file = shift || 'target/rose.gcode' ;

my @lines = do { open my $fh, '<', $file or die; <$fh> };
my ($iterations, $precision) = @lines < 1000 ? (50_000, 0.01) : (100, 0.005);
my $bench = Dumbbench->new(
  target_rel_precision => $precision,
  initial_runs         => $iterations,    # the higher the more reliable
);
$bench->add_instances(
    Dumbbench::Instance::PerlSub->new(name => 'naive',      code => \&naive_impl),
    Dumbbench::Instance::PerlSub->new(name => 'non-greedy', code => \&non_greedy_impl),
    Dumbbench::Instance::PerlSub->new(name => 'greedy',     code => \&greedy_impl),
    Dumbbench::Instance::PerlSub->new(name => 'substr',     code => \&substr_impl),
    Dumbbench::Instance::PerlSub->new(name => 'index',      code => \&index_impl),
);

$bench->run;
$bench->report;

sub naive_impl
{
    my ($line, $count) = ('', 0);
    for(@lines)
    {
        ($line, $count) = ($_, $count+1) if /^G[01]\b.*Z/;
    }
    say STDERR "Error naive ($count)" if defined $num_matches && $count != $num_matches;
    return;
}

sub non_greedy_impl
{
    my ($line, $count) = ('', 0);
    for(@lines)
    {
        ($line, $count) = ($_, $count+1) if /^G[01](?![\d.]).*?Z/;
    }
    say STDERR "Error non-greedy ($count)" if defined $num_matches && $count != $num_matches;
    return;
}

sub greedy_impl
{
    my ($line, $count) = ('', 0);
    for(@lines)
    {
        ($line, $count) = ($_, $count+1) if /^G[01](?![\d.]).*Z/;
    }
    say STDERR "Error greedy ($count)" if defined $num_matches && $count != $num_matches;
    return;
}

sub substr_impl
{
    my ($line, $count, $match, $pos) = ('', 0, '', 0);
    for(@lines)
    {
        $match = substr( $_, 0, 2 );
        next unless $match eq 'G1' || $match eq 'G0';
        $match = substr( $_, 2, 1 );
        next if '0' le $match && $match le '9';
        next if -1 == ($pos = index( $_, 'Z', 3 ));
        ($line, $count) = ($_, $count+1);
    }
    say STDERR "Error substr ($count)" if defined $num_matches && $count != $num_matches;
    return;
}

sub index_impl
{
    my ($line, $count, $match, $pos) = ('', 0, '', 0);
    for(@lines)
    {
        $match = substr( $_, 0, 2 );
        next unless $match eq 'G1' || $match eq 'G0';
        $match = substr( $_, 2, 1 );
        next if '0' le $match && $match le '9';
        next if -1 == ($pos = index( $_, 'Z', 3 ));
        ($line, $count) = ($_, $count+1);
    }
    say STDERR "Error index ($count)" if defined $num_matches && $count != $num_matches;
    return;
}
