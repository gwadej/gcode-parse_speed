#!/usr/bin/env perl

use strict;
use warnings;
use 5.022;
use Getopt::Long;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Gcode::ParseSpeed;

my %opts;
GetOptions(
    \%opts,
    'bm', 'db', 'dbm',
    'matches=i',
    'prec=f',
    'iter=i',
) or die "Unknown option\n";

my $num_matches; # = 6755;

my $file = shift || 'target/rose.gcode' ;
my @lines = do { open my $fh, '<', $file or die; <$fh> };
my %tests = (
    naive        => \&naive_impl,
    'non-greedy' => \&non_greedy_impl,
    'greedy'     => \&greedy_impl,
    'substr'     => \&substr_impl,
    'index'      => \&index_impl,
    exact        => \&exact_match_impl,
);

Gcode::ParseSpeed::run( \%opts, \%tests, scalar(@lines) );

sub naive_impl
{
    my ($line, $count) = ('', 0);
    for(@lines)
    {
        ($line, $count) = ($_, $count+1) if /^G92\s*E0$/;
    }
    say STDERR "Error naive ($count)" if defined $num_matches && $count != $num_matches;
    return;
}

sub non_greedy_impl
{
    my ($line, $count) = ('', 0);
    for(@lines)
    {
        ($line, $count) = ($_, $count+1) if /^G92\s*?E0\s*?$/;
    }
    say STDERR "Error non-greedy ($count)" if defined $num_matches && $count != $num_matches;
    return;
}

sub greedy_impl
{
    my ($line, $count) = ('', 0);
    for(@lines)
    {
        ($line, $count) = ($_, $count+1) if /^G92\s*E0\s*$/;
    }
    say STDERR "Error greedy ($count)" if defined $num_matches && $count != $num_matches;
    return;
}

sub substr_impl
{
    my ($line, $count, $match, $pos) = ('', 0, '', 0);
    for(@lines)
    {
        next unless substr( $_, 0, 3) eq 'G92';
        $match = substr( $_, 3, 1 );
        next if '0' le $match && $match le '9';
        next if -1 == ($pos = index( $_, 'E0', 3 ));
        $match = substr( $_, $pos+2, 1);
        next if $match eq '.' || '0' le $match && $match le '9';
        ($line, $count) = ($_, $count+1);
    }
    say STDERR "Error substr ($count)" if defined $num_matches && $count != $num_matches;
    return;
}

sub index_impl
{
    my ($line, $count, $match, $pos) = ('', 0, '', 0);
    for(@lines)
    {
        next unless 0 == index( $_, 'G92' );
        $match = substr( $_, 3, 1 );
        next if '0' le $match && $match le '9';
        next if -1 == ($pos = index( $_, 'E0', 3 ));
        $match = substr( $_, $pos+2, 1);
        next if $match eq '.' || '0' le $match && $match le '9';
        ($line, $count) = ($_, $count+1);
    }
    say STDERR "Error index ($count)" if defined $num_matches && $count != $num_matches;
    return;
}

sub exact_match_impl
{
    my ($line, $count) = ('', 0);
    for(@lines)
    {
        ($line, $count) = ($_, $count+1) if $_ eq "G92 E0\n";
    }
    say STDERR "Error naive ($count)" if defined $num_matches && $count != $num_matches;
    return;
}
